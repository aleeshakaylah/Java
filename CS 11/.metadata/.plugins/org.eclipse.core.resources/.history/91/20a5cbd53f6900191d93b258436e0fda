import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
 
import javax.imageio.ImageIO;

import com.sun.java.util.jar.pack.Package.Class.Field;
 
/**
 * Class SierpinskiStarterCode is a demo for this assignment.
 */
public class AssignmentThree {
	/**
	 * Writes a sample image to file "sierpinski-demo.png"
	 * The width (in pixels) of the image, as a positive decimal integer
The height (in pixels) of the image, as a positive decimal integer
The minimum area (in pixels) that a triangle must have in order to be drawn, as a decimal floating-point value to double precision.
The foreground/drawing color, as a string acceptable to method Color.decode, as in the starter code below.
The output filename, i.e. a path to a file in which the output will be stored as a PNG image.

	 * @param args unused
	 */
	public static void main(String[] args) {
		double width = Double.parseDouble(args[0]);
		double height = Double.parseDouble(args[1]);
		float area = Float.parseFloat(args[2]);
		String color = args[3];
		String filename = args[4];
		
    // A 320x240-pixel RGB image
    BufferedImage image = new BufferedImage((int)width, (int)height, BufferedImage.TYPE_INT_RGB);
    // Graphics2D is our "drawing" class
    Graphics2D graphics = image.createGraphics();
    // Any clearing operations will use a yellow color
    Color c = (Color)Color.class.getField(color).get(null);
    graphics.setBackground(c);
    // Clear the image to the background color
    graphics.clearRect(0, 0, image.getWidth(), image.getHeight());
    // Any drawing operations will use a blue color
    graphics.setColor(Color.black);
    // Draw a line from the upper-left corner (0, 0) to the lower-right corner (width - 1, height - 1):
    graphics.drawLine(0, 0, image.getWidth() - 1, image.getHeight() - 1);
    // Draw a line from the lower-left corner (0, height - 1) to the upper-right corner (width - 1, 0):
    graphics.drawLine(0, image.getHeight() - 1, image.getWidth() - 1, 0);
    // Save the image as a PNG file named "sierpinski-demo.png"
    try {
      ImageIO.write(image, "png", new File(filename + ".png"));
      System.out.println("hello");
    } 
    catch (Exception e) {
      System.err.println("Unable to write image file!: " + e.getMessage());
    }
  }
	//public static void Sierpinski(double tx, double ty, double lx, double ly, double rx, double ry) {
	//	  if AreaToDraw < MinimumArea:
	//	    return
	//	  DrawLine(Top, Left)
	//	  DrawLine(Left, Right)
	//	  DrawLine(Right, Top)
	//	  Sierpinski(Top, Midpoint(Top, Left), Midpoint(Top, Right))     # T1
	//	  Sierpinski(Midpoint(Top, Left), Left, Midpoint(Left, Right))   # T2
	//	  Sierpinski(Midpoint(Top, Right), Midpoint(Left, Right), Right)
	//}
}
